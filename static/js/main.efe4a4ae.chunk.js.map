{"version":3,"sources":["components/Favorites.jsx","components/AddFavorite.jsx","components/Person.jsx","components/Starwars.jsx","App.js","serviceWorker.js","index.js"],"names":["Favorites","favorites","className","filter","favorite","unreal","map","key","name","eye_color","birth_year","AddFavorite","add","useState","eyeColor","setEyecolor","setName","birthyear","setBirthyear","onSubmit","e","preventDefault","type","value","onChange","target","Person","person","addFavorite","onClick","Starwars","search","setSearch","setFavorites","people","setPeople","loading","setLoading","error","setError","useEffect","getAllPeople","find","concat","next","a","allResults","i","axios","get","data","results","message","placeholder","console","log","length","regx","RegExp","match","isMatching","App","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.efe4a4ae.chunk.js","sourcesContent":["import React, { } from 'react';\r\n\r\nconst Favorites = ({ favorites }) => {\r\n\r\n    return (\r\n        <div className=\"addFavorites\">\r\n            <label>Favorites:</label>\r\n            <div className=\"listUL antiabsolute\">\r\n                {favorites.filter(favorite => !favorite.unreal).map(favorite =>\r\n                    <ul key={favorite.name}> \r\n                    <li>{favorite.name}</li>\r\n                    <li> {favorite.eye_color} </li>\r\n                    <li>{favorite.birth_year}</li>\r\n\r\n                    </ul>)}\r\n            </div>\r\n            <label>Made up:</label>\r\n            <div className=\"listUL antiabsolute\">\r\n                {favorites.filter(favorite => favorite.unreal).map(favorite =>\r\n                    <ul  key={favorite.name}>\r\n                        <li> {favorite.name}</li>\r\n                        <li> {favorite.eye_color}</li>\r\n                        <li> {favorite.birth_year}</li>\r\n\r\n                    </ul>)}\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n\r\n}\r\n\r\nexport default Favorites;\r\n","import React, { useState } from 'react';\r\n\r\nconst AddFavorite = ({ add }) => {\r\n    const [eyeColor, setEyecolor] = useState(\"\");\r\n    const [name, setName] = useState(\"\");\r\n    const [birthyear, setBirthyear] = useState(\"\");\r\n    const handleEye = (e) => {\r\n        setEyecolor(e.target.value);\r\n    }\r\n    const handleName = (e) => {\r\n        setName(e.target.value);\r\n    }\r\n    const handleBirth = (e) => {\r\n        setBirthyear(e.target.value);\r\n    }\r\n    const handleSubmit = (e) => {\r\n        let newFavorite = {\r\n            name: name,\r\n            eye_color: eyeColor,\r\n            birth_year: birthyear,\r\n            unreal: true\r\n        }\r\n        add(newFavorite);\r\n        e.preventDefault();\r\n        setEyecolor(\"\");\r\n        setName(\"\");\r\n        setBirthyear(\"\");\r\n    }\r\n    return (\r\n        <div className=\"addFavorites dontoverdoit\">\r\n            <label>Create a new character</label>\r\n            <form onSubmit={handleSubmit}>\r\n                <ul className=\"addUL\">\r\n                    <li>\r\n                        <label>Name:</label>\r\n                        <input type=\"text\" value={name} onChange={handleName} />\r\n                    </li>\r\n                    <li>\r\n                        <label>Eye color:</label>\r\n                        <input type=\"text\" value={eyeColor} onChange={handleEye} />\r\n                    </li>\r\n                    <li>\r\n                        <label>Birth year:</label>\r\n                        <input type=\"text\" value={birthyear} onChange={handleBirth} />\r\n                    </li>\r\n                    <input type=\"submit\" value=\"Submit\" />\r\n                </ul>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddFavorite;\r\n","import React, { } from 'react';\r\n\r\nconst Person = ({ person, addFavorite }) => {\r\n    return (\r\n\r\n        <li key={person.name}>\r\n            <div>\r\n                <ul>\r\n                    <li>{person.name}</li>\r\n                    <li>{person.eye_color} eyes</li>\r\n                    <li>Birth year: {person.birth_year}</li>\r\n                </ul>\r\n            </div>\r\n            <div><button className=\"favoriteButton\" onClick={() => addFavorite(person)}>Add favorite</button></div>\r\n\r\n        </li>\r\n    )\r\n}\r\nexport default Person;","import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport Favorites from './Favorites';\r\nimport AddFavorite from './AddFavorite';\r\nimport Person from './Person';\r\n\r\nconst Starwars = () => {\r\n    const API_URL = \"http://swapi.dev/api/people/\";\r\n    const [search, setSearch] = useState(\"\");\r\n    const [favorites, setFavorites] = useState([]);\r\n    const [people, setPeople] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n\r\n    useEffect(() => {\r\n        getAllPeople(API_URL);\r\n        setLoading(false);\r\n    }, [])\r\n\r\n    const handleChange = (e) => {\r\n        console.log(\"HandleChange: \" + search)\r\n        setSearch(e.target.value);\r\n    }\r\n\r\n    const addFavorite = (person) => {\r\n        if (!favorites.find(favorite => person.name === favorite.name)) {\r\n            setFavorites(favorites => favorites.concat(person));\r\n        }\r\n    }\r\n    const getAllPeople = async (next) => {\r\n        let allResults = [];\r\n        try {\r\n            for (var i = 0; i < 10 && next; i++) {\r\n                const data = await axios.get(next);\r\n\r\n                if (data != null) {\r\n                    next = data.data.next;\r\n                    allResults = allResults.concat(data.data.results);\r\n                }\r\n                else {\r\n                    break;\r\n                }\r\n            }\r\n            setPeople(allResults);\r\n        } catch (err) {\r\n            setError(err.message);\r\n        }\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n    }\r\n    const isMatching = (person, search) => {\r\n        if (search.length === 0) {\r\n            return false;\r\n        }\r\n        let regx = RegExp(search, \"i\");\r\n        if (person.name.match(regx)) {\r\n            return true;\r\n        }\r\n        if (person.eye_color.match(regx)) {\r\n            return true;\r\n        }\r\n        if (person.birth_year.match(regx)) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    if (loading) {\r\n        return <h3> loading</h3>\r\n    }\r\n    if (error) {\r\n        return (<h3>{error}</h3>);\r\n    }\r\n    return (\r\n        <div>\r\n            <div className=\"category\">\r\n                <form onSubmit={handleSubmit}>\r\n\r\n                    <input className=\"searchInput\" type=\"text\" placeholder=\"Search character\" value={search} onChange={handleChange} />\r\n                    {/* <input type=\"submit\" value=\"Submit\" /> */}\r\n                </form>\r\n\r\n                <ul className=\"listUL\">\r\n                    {people.filter(person => isMatching(person, search)).map(person =>\r\n                        <Person key={person.name} person={person} addFavorite={addFavorite} />\r\n                    )}\r\n                </ul>\r\n            </div>\r\n            <div className=\"switch\">\r\n                <div className=\"first\">\r\n                    <Favorites favorites={favorites}></Favorites>\r\n                </div>\r\n                <div className=\"last\">\r\n                    <AddFavorite add={addFavorite}></AddFavorite>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Starwars;\r\n","import React from 'react';\nimport './App.css';\nimport Starwars from './components/Starwars'\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Star Wars </h1>\n      </header>\n      <Starwars></Starwars>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}